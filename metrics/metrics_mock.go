// Code generated by MockGen. DO NOT EDIT.
// Source: metrics/metrics.go

// Package metrics is a generated GoMock package.
package metrics

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRPCClientInterface is a mock of RPCClientInterface interface.
type MockRPCClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientInterfaceMockRecorder
}

// MockRPCClientInterfaceMockRecorder is the mock recorder for MockRPCClientInterface.
type MockRPCClientInterfaceMockRecorder struct {
	mock *MockRPCClientInterface
}

// NewMockRPCClientInterface creates a new mock instance.
func NewMockRPCClientInterface(ctrl *gomock.Controller) *MockRPCClientInterface {
	mock := &MockRPCClientInterface{ctrl: ctrl}
	mock.recorder = &MockRPCClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCClientInterface) EXPECT() *MockRPCClientInterfaceMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockRPCClientInterface) Call(result interface{}, method string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{result, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockRPCClientInterfaceMockRecorder) Call(result, method interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{result, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockRPCClientInterface)(nil).Call), varargs...)
}
